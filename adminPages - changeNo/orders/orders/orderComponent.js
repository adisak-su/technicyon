// order.js - ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
class Order {
    static callbackFunction = null;
    constructor(callbackFun) {
        this.items = []; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô order
        this.orderNumber = this.generateOrderNumber();
        this.discountAmount = 0; // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        this.taxRate = 0.07; // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ
        this.container = null; // DOM container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        Order.callbackFunction = callbackFun ?? null;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà
    generateOrderNumber() {
        const now = new Date();
        const randomNum = Math.floor(Math.random() * 1000);
        return `#${now.getDate()}${
            now.getMonth() + 1
        }${now.getFullYear()}-${randomNum}`;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ productId
    addItem(productId, quantity = 1) {
        const product = products.find((p) => p.id === productId);
        if (!product) return;

        const existingItem = this.items.find((item) => item.id === productId);

        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            this.items.push({
                id: product.id,
                name: product.name,
                price: product.price,
                quantity: quantity,
                icon: product.icon || "üõí",
            });
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        this.render();
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    changeQuantity(itemIndex, delta) {
        if (this.items[itemIndex]) {
            this.items[itemIndex].quantity += delta;

            // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å
            if (this.items[itemIndex].quantity < 1) {
                this.items.splice(itemIndex, 1);
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
            this.render();
        }
    }

    // ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å order
    removeItem(itemIndex) {
        if (this.items[itemIndex]) {
            this.items.splice(itemIndex, 1);

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
            this.render();
        }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏µ
    getSubtotal() {
        return this.items.reduce(
            (total, item) => total + item.price * item.quantity,
            0
        );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
    getTax() {
        return this.getSubtotal() * this.taxRate;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    getGrandTotal() {
        return this.getSubtotal() + this.getTax() - this.discountAmount;
    }

    // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    applyDiscount(discountCode) {
        // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        if (discountCode === "DISCOUNT10") {
            this.discountAmount = this.getSubtotal() * 0.1; // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 10%
            this.render();
            return true;
        } else if (discountCode) {
            return false; // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
        return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÉ‡∏´‡∏°‡πà
    createNewOrder() {
        this.items = [];
        this.orderNumber = this.generateOrderNumber();
        this.discountAmount = 0;
        this.render();
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    hasItems() {
        return this.items.length > 0;
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DOM container
    setContainer(container) {
        this.container = container;
        this.render();
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏à‡∏≤‡∏Å API
    async loadFromAPI(apiUrl) {
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`API error: ${response.status}`);
            }

            const orderData = await response.json();
            this.loadFromData(orderData);
            showApiStatus("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏à‡∏≤‡∏Å API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        } catch (error) {
            console.error("Failed to load order data:", error);
            showApiStatus(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, "danger");
        }
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏à‡∏≤‡∏Å object
    loadFromData(orderData) {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        this.orderNumber = orderData.orderNumber || this.generateOrderNumber();
        this.discountAmount = orderData.discountAmount || 0;
        this.taxRate = orderData.taxRate || 0.07;

        // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        this.items = [];

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
        if (orderData.items && Array.isArray(orderData.items)) {
            orderData.items.forEach((item) => {
                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                const product = products.find((p) => p.id === item.id);

                if (product) {
                    this.items.push({
                        id: item.id,
                        name: product.name,
                        price: product.price,
                        quantity: item.quantity || 1,
                        icon: product.icon || "üõí",
                    });
                }
            });
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        this.render();
    }

    static payOrderSubmit() {
        if (Order.callbackFunction) {
            Order.callbackFunction();
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• UI ‡∏Ç‡∏≠‡∏á order
    render() {
        if (!this.container) return;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö order UI
        this.container.innerHTML = `
      <div class="order-header">
        <h5>üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠<br><small>‡∏ö‡∏¥‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: <span id="order-number">${
            this.orderNumber
        }</span></small></h5>
      </div>
      
      <div class="order-meta">
        <div class="form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
          <input type="date" class="form-control" id="order-date" value="${getTodayDate()}" onchange="updateThaiDate()" />
        </div>

        <div class="form-group">
          <label>‡πÄ‡∏ß‡∏•‡∏≤:</label>
          <input type="time" class="form-control" id="order-time" value="${getCurrentTime()}" />
        </div>

        <div class="form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏û.‡∏®.):</label>
          <input type="text" class="form-control" id="thai-date" value="${getThaiDate()}" disabled />
        </div>
      </div>
      
      <div class="order-list" id="order-list">
        ${this.renderOrderItems()}
      </div>
      
      <div class="discount-input-group">
        <label>‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</label>
        <div class="input-group">
          <input type="text" class="form-control" id="discount-code" placeholder="DISCOUNT10">
          <div class="input-group-append">
            <button class="btn btn-secondary" onclick="currentOrder.applyDiscount(document.getElementById('discount-code').value)">‡πÉ‡∏ä‡πâ</button>
          </div>
        </div>
      </div>
      
      <div class="order-summary">
        <div class="d-flex justify-content-between">
          <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
          <span id="total">‡∏ø${this.getSubtotal().toFixed(2)}</span>
        </div>
        <div class="d-flex justify-content-between">
          <span>‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
          <span id="discount">‡∏ø${this.discountAmount.toFixed(2)}</span>
        </div>
        <div class="d-flex justify-content-between">
          <span>‡∏†‡∏≤‡∏©‡∏µ (7%):</span>
          <span id="tax">‡∏ø${this.getTax().toFixed(2)}</span>
        </div>
        <div class="d-flex justify-content-between mt-2 font-weight-bold">
          <span>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞:</span>
          <span id="grand-total" class="grand-total">‡∏ø${this.getGrandTotal().toFixed(
              2
          )}</span>
        </div>
      </div>
      
      <button class="btn btn-pay" onclick="Order.payOrderSubmit();">
        <i class="fas fa-money-bill-wave mr-2"></i>üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      </button>
    `;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô order
    renderOrderItems() {
        if (this.items.length === 0) {
            return `
        <div class="order-empty">
          <i class="fas fa-shopping-cart"></i>
          <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
        </div>
      `;
        }

        return `
      <ul class="list-group">
        ${this.items
            .map(
                (item, i) => `
          <li class="list-group-item order-item">
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <div><strong>${item.name}</strong></div>
                <div class="order-controls">
                  <button class="btn btn-sm btn-outline-primary rounded-circle" 
                          onclick="currentOrder.changeQuantity(${i}, -1)">
                    <i class="fas fa-minus"></i>
                  </button>
                  <span class="mx-2">${item.quantity}</span>
                  <button class="btn btn-sm btn-outline-primary rounded-circle" 
                          onclick="currentOrder.changeQuantity(${i}, 1)">
                    <i class="fas fa-plus"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger ml-2" 
                          onclick="currentOrder.removeItem(${i})">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
              <div class="text-right">
                <div><strong>‡∏ø${(item.price * item.quantity).toFixed(
                    2
                )}</strong></div>
                <small class="text-muted">‡∏ø${item.price.toFixed(2)}/‡∏ä‡∏¥‡πâ‡∏ô</small>
              </div>
            </div>
          </li>
        `
            )
            .join("")}
      </ul>
    `;
    }
}
