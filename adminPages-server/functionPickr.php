<!DOCTYPE html>
<html lang="th">

<head>
  <meta charset="UTF-8">
  <title>Flatpickr + ‡∏û.‡∏®. + ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πà‡∏≤</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap 4 -->
  <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">  -->

  <link rel="stylesheet" href="../assets/css/adminlte.min.css">
  <!-- <link rel="stylesheet" href="plugins/toastr/toastr.min.css"> -->
  <link rel="stylesheet" href="../plugins/fontawesome-free/css/all.min.css">
  <link rel="stylesheet" href="../assets/css/style.css?<?php echo time(); ?>">



  <!-- Flatpickr -->
  <link rel="stylesheet" href="../plugins/flatpickr/dist/flatpickr.min.css">
  <link rel="stylesheet" href="../plugins/flatpickr/dist/themes/material_blue.css">

  <!-- SweetAlert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    /* ‡∏ã‡πà‡∏≠‡∏ô input ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô */
    /*
    #flatpickr-real {
      position: absolute;
      z-index: -1;
      opacity: 0;
      width: 1px;
      height: 1px;
      pointer-events: none;
    }
  */
    .input-group .form-control {
      background-color: #fff;
      cursor: pointer;
    }
  </style>
</head>

<body class="p-4">
  <div class="container">
    <h4>üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏™‡∏î‡∏á ‡∏û.‡∏®.)</h4>

    <div class="form-group">
      <label>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (‡∏û.‡∏®.):</label>
      <div class="input-group position-relative">
        <!-- ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• -->
        <input type="text" class="form-control" id="display-datetime" readonly placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤" />
        <!-- ‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà Flatpickr ‡πÉ‡∏ä‡πâ -->
        <input type="text" id="flatpickr-real" />

        <!-- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ -->
        <div class="input-group-append">
          <button class="btn btn-outline-secondary" type="button" id="calendar-btn">üìÖ</button>
          <button class="btn btn-outline-danger" type="button" id="clear-btn">‚ùå</button>
          <button class="btn btn-outline-danger" type="button" id="set-btn">set</button>
        </div>
      </div>
    </div>

    <button class="btn btn-success mt-2" onclick="submit()">‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/th.js"></script>

  <script>
    const picker = initDateTimePicker({
      flatpickrSelector: "#flatpickr-real",
      displaySelector: "#display-datetime",
      calendarBtnSelector: "#calendar-btn",
      clearBtnSelector: "#clear-btn",
      initialValue: null // ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà

      //initialValue: "2025-06-27 15:30:35" // ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà
    });

    document.querySelector("#set-btn").addEventListener("click", () => {
      picker.setDateFromString("2025-12-30 08:00:00");
    });

    // üìå ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î submit
    function submit() {
      if (!picker) {
        Swal.fire("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", "", "warning");
        return;
      }
      let output = picker.getFormatted();

      Swal.fire({
        title: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        html: `
          <b>üìÖ Date object:</b> ${picker.getDate()}<br>
          <b>üìÖ Date Time:</b> ${output}<br>
          <b>‚è± Timestamp:</b> ${picker.getTimestamp()}<br>
          <b>üïí ISO:</b> ${picker.getISOString()}
        `,
        icon: "success"
      });
    }
    /*
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    console.log(picker.getDate());        // Date object
    console.log(picker.getTimestamp());   // timestamp
    console.log(picker.getISOString());   // ISO string
    console.log(picker.getFormatted());   // '2025-06-27 15:30'

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å string ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:
    picker.setDateFromString("2025-12-01 08:00:00");
      */
    function initDateTimePicker({
      flatpickrSelector,
      displaySelector,
      calendarBtnSelector,
      clearBtnSelector,
      initialValue = null
    }) {
      let selectedDate = new Date();

      function parseLocalDate(str) {
        const parts = str.split(/[- :]/);
        return new Date(
          parseInt(parts[0]),
          parseInt(parts[1]) - 1,
          parseInt(parts[2]),
          parseInt(parts[3]),
          parseInt(parts[4]),
          parseInt(parts[5]) || 0
        );
      }

      function updateDisplay(date) {
        if (!date) {
          document.querySelector(displaySelector).value = '';
          return;
        }
        const dd = ('0' + date.getDate()).slice(-2);
        const mm = ('0' + (date.getMonth() + 1)).slice(-2);
        const yyyy = date.getFullYear() + 543;
        const hh = ('0' + date.getHours()).slice(-2);
        const mi = ('0' + date.getMinutes()).slice(-2);
        document.querySelector(displaySelector).value = `${dd}/${mm}/${yyyy} ${hh}:${mi}`;
      }

      function formatDateForOutput(date) {
        const yyyy = date.getFullYear();
        const mm = ('0' + (date.getMonth() + 1)).slice(-2);
        const dd = ('0' + date.getDate()).slice(-2);
        const hh = ('0' + date.getHours()).slice(-2);
        const mi = ('0' + date.getMinutes()).slice(-2);
        return `${yyyy}-${mm}-${dd} ${hh}:${mi}`;
      }

      const fp = flatpickr(flatpickrSelector, {
        enableTime: true,
        time_24hr: true,
        dateFormat: "Y-m-d H:i",
        locale: "th",
        defaultDate: null,
        onChange: (selectedDates) => {
          selectedDate = selectedDates[0];
          updateDisplay(selectedDate);
        }
      });

      const openCalendar = () => fp.open();

      document.querySelector(displaySelector).addEventListener("click", openCalendar);
      document.querySelector(calendarBtnSelector).addEventListener("click", openCalendar);

      document.querySelector(clearBtnSelector).addEventListener("click", () => {
        selectedDate = new Date();
        fp.setDate(selectedDate);
        updateDisplay(selectedDate);
      });

      if (initialValue) {
        const restored = parseLocalDate(initialValue);
        selectedDate = restored;
        fp.setDate(restored);
        updateDisplay(restored);
      } else {
        fp.setDate(selectedDate);
        updateDisplay(selectedDate);
      }

      return {
        getDate: () => selectedDate,
        getTimestamp: () => selectedDate.getTime(),
        getISOString: () => selectedDate.toISOString(),
        getFormatted: () => formatDateForOutput(selectedDate),
        setDateFromString: (str) => {
          const d = parseLocalDate(str);
          selectedDate = d;
          fp.setDate(d);
          updateDisplay(d);
        }
      };
    }
  </script>
</body>

</html>